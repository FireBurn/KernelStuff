Delivered-To: mike@fireburn.co.uk
Received: by 2002:a05:7300:3ba3:b0:66:d1b8:76a9 with SMTP id d35csp1770859dys;
        Mon, 13 Jun 2022 01:08:19 -0700 (PDT)
X-Received: by 2002:a17:906:7484:b0:712:1178:dbf3 with SMTP id e4-20020a170906748400b007121178dbf3mr16713324ejl.72.1655107699338;
        Mon, 13 Jun 2022 01:08:19 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; t=1655107699; cv=none;
        d=google.com; s=arc-20160816;
        b=RoNX4qM+1uheflTp6PbsUG3IddxYQPOuSMpL6F+LMd/BvzIFBl6xSrBHQP5/9baiZD
         KrfAGE6nKp8/xRd++XpZfGSDbljfQ1JLY9npfZJtTaWWhrx8ymgL5PUVX7NdR2dR1AsJ
         1DlQSLQf5zScCx+kgerhwa+L13FVsUkEP6EpiM0c/uUwWG3Jtf37UiUha2KZeCzneUMT
         jzKKzrvLOsmDTeonGyC+BNvWTwYTKmAMx7gftFcr04Y4xJMw55gzHk8qZATymZYWHxqE
         x93NRDboQl0SZybgSCM9s7TH15UcTICkgCCqWZHCsPcnwq/Iv9ImwweARiK4zRDvM1wV
         1D5A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=content-transfer-encoding:mime-version:message-id:date:subject:cc
         :to:from:dkim-signature;
        bh=NaefOleXp7tfkdwEdueGWxPvSY7lD620uT2G9aQl73I=;
        b=Gx2nw+fKfTQ0kj7A0iUlTQuikHSdr2vAHEmHmAH9PSkQHs8Opf3LtzPV7Cc/orQRec
         XaQvtVziZC/4QJa6B6I/zTbPiBO++eVaBM8+M+3BBpzeAIopiZuNP9MMmtegmGEzBUHP
         B2YPqzcudCtyf9j9SZAS/OrF34ZkpIBUMHuwRIcKGLJWbErK6J4ZkZc0/YL+tfZlMmtc
         o8G6mUHsRVAZlNS+Xbtwkeaenm0hMP/CabPA8A8dQPQ/n0cUpbzffcTSEI6fzdL0ISui
         qGwnH0ohqIoR1Fsi5XFUxDR+RAc4/GGLapyug4a1jHhyx5R1lpqrBj9AUt68ieuXgN96
         pfWw==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@gmail.com header.s=20210112 header.b=g+bLshvn;
       spf=pass (google.com: domain of ckoenig.leichtzumerken@gmail.com designates 209.85.220.41 as permitted sender) smtp.mailfrom=ckoenig.leichtzumerken@gmail.com;
       dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
Return-Path: <ckoenig.leichtzumerken@gmail.com>
Received: from mail-sor-f41.google.com (mail-sor-f41.google.com. [209.85.220.41])
        by mx.google.com with SMTPS id f15-20020a056402354f00b0042aabfba6fbsor2001316edd.40.2022.06.13.01.08.19
        for <mike@fireburn.co.uk>
        (Google Transport Security);
        Mon, 13 Jun 2022 01:08:19 -0700 (PDT)
Received-SPF: pass (google.com: domain of ckoenig.leichtzumerken@gmail.com designates 209.85.220.41 as permitted sender) client-ip=209.85.220.41;
Authentication-Results: mx.google.com;
       dkim=pass header.i=@gmail.com header.s=20210112 header.b=g+bLshvn;
       spf=pass (google.com: domain of ckoenig.leichtzumerken@gmail.com designates 209.85.220.41 as permitted sender) smtp.mailfrom=ckoenig.leichtzumerken@gmail.com;
       dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20210112;
        h=from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=NaefOleXp7tfkdwEdueGWxPvSY7lD620uT2G9aQl73I=;
        b=g+bLshvn5EjqABd/tY4D5Hsqhq2yvCSENwlBFOiL3LuypC6wcoh6AXZD5XX0rPZZ8Z
         OXzlkTFds2XK98lZb4g0Vbw0ag5udNKIAlUTfBLeySoCqJ4ghkTeu7b54QAdeCF/6zxO
         PL57UmWAETkSEjr6RE7aL8B9Ewfx/QGKDsKBMM+FeuElCVop0aopqlOvtoNaA0bwyioU
         LIh4MQxlFLHTMyjU/5orR+SQNviCT6SjLg+4VtKTuIgGaGiKhPolmoHry4DHYQgWsPSx
         Qt32jWg3nq0bGZbaYVS6p9yYLgPkk/5xI8moxIxCVnDphMYFRN/rxxXC3wiORC5AAA7F
         URfw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20210112;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:mime-version
         :content-transfer-encoding;
        bh=NaefOleXp7tfkdwEdueGWxPvSY7lD620uT2G9aQl73I=;
        b=cuDq782Qq839Ykc0RevZ1B3P5L7vKf565nfDN2PbUcasl7yvM11UTrkkaj2e/QKqll
         /GA5NFXEiVjiSE15lc6AHI0EYtqxzPA/oQGX3nsmYoquy+apkb/MyxvRxU+CoKJBwVJ6
         g5oHJghpDnHMnbfh6Q3sNdxmvOcB7ADTRPX3Yo8qk6Y5rrj6g25EQumxIqlk+5IL174F
         0ODEwneAG+nyeA0JbzMc8hyA0maZHXl0sKPly3irGaBSZ89PQu+O38mMA1cDPkEqBJxY
         sHOOIgn35eSm5UToF7qBwJfTle63HC6U3f1mfhzzoJIyxQTLKkkSsWMIz6vYg/ysOlBK
         t7gw==
X-Gm-Message-State: AOAM530aWHgID8RkRCTGrrMajQwrKwv2QYwFc1afNRB50PjRk9f9nX8w
	krFy+uBaZUIEpoA/xtc8XHk=
X-Google-Smtp-Source: ABdhPJwLAePhKt/6dSJ9sjn+Z99vx2bR1dmZZ7vw1LD0Uyzl8AMU1OfrmXOSnFsUuiYbDael2r47Dw==
X-Received: by 2002:a05:6402:430d:b0:42e:199a:4eb8 with SMTP id m13-20020a056402430d00b0042e199a4eb8mr60358009edc.411.1655107698827;
        Mon, 13 Jun 2022 01:08:18 -0700 (PDT)
Return-Path: <ckoenig.leichtzumerken@gmail.com>
Received: from able.fritz.box (p57b0b659.dip0.t-ipconnect.de. [87.176.182.89])
        by smtp.gmail.com with ESMTPSA id zo16-20020a170906ff5000b0070efa110afcsm3512604ejb.83.2022.06.13.01.08.17
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Mon, 13 Jun 2022 01:08:18 -0700 (PDT)
From: "=?UTF-8?q?Christian=20K=C3=B6nig?=" <ckoenig.leichtzumerken@gmail.com>
X-Google-Original-From: =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>
To: Arunpravin.PaneerSelvam@amd.com,
	mike@fireburn.co.uk,
	amd-gfx@lists.freedesktop.org,
	dri-devel@lists.freedesktop.org
Cc: =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>,
	Luben Tuikov <luben.tuikov@amd.com>
Subject: [PATCH] drm/ttm: fix bulk move handling v2
Date: Mon, 13 Jun 2022 10:08:16 +0200
Message-Id: <20220613080816.4965-1-christian.koenig@amd.com>
X-Mailer: git-send-email 2.25.1
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The resource must be on the LRU before ttm_lru_bulk_move_add() is called
and we need to check if the BO is pinned or not before adding it.

Additional to that we missed taking the LRU spinlock in ttm_bo_unpin().

Signed-off-by: Christian KÃ¶nig <christian.koenig@amd.com>
Acked-by: Luben Tuikov <luben.tuikov@amd.com>
---
 drivers/gpu/drm/ttm/ttm_bo.c       | 22 ++++++++-----
 drivers/gpu/drm/ttm/ttm_resource.c | 52 +++++++++++++++++++++---------
 include/drm/ttm/ttm_resource.h     |  8 ++---
 3 files changed, 54 insertions(+), 28 deletions(-)

diff --git a/drivers/gpu/drm/ttm/ttm_bo.c b/drivers/gpu/drm/ttm/ttm_bo.c
index 296af2b89951..0e210df65c30 100644
--- a/drivers/gpu/drm/ttm/ttm_bo.c
+++ b/drivers/gpu/drm/ttm/ttm_bo.c
@@ -103,11 +103,11 @@ void ttm_bo_set_bulk_move(struct ttm_buffer_object *bo,
 		return;
 
 	spin_lock(&bo->bdev->lru_lock);
-	if (bo->bulk_move && bo->resource)
-		ttm_lru_bulk_move_del(bo->bulk_move, bo->resource);
+	if (bo->resource)
+		ttm_resource_del_bulk_move(bo->resource, bo);
 	bo->bulk_move = bulk;
-	if (bo->bulk_move && bo->resource)
-		ttm_lru_bulk_move_add(bo->bulk_move, bo->resource);
+	if (bo->resource)
+		ttm_resource_add_bulk_move(bo->resource, bo);
 	spin_unlock(&bo->bdev->lru_lock);
 }
 EXPORT_SYMBOL(ttm_bo_set_bulk_move);
@@ -683,8 +683,11 @@ void ttm_bo_pin(struct ttm_buffer_object *bo)
 {
 	dma_resv_assert_held(bo->base.resv);
 	WARN_ON_ONCE(!kref_read(&bo->kref));
-	if (!(bo->pin_count++) && bo->bulk_move && bo->resource)
-		ttm_lru_bulk_move_del(bo->bulk_move, bo->resource);
+	spin_lock(&bo->bdev->lru_lock);
+	if (bo->resource)
+		ttm_resource_del_bulk_move(bo->resource, bo);
+	++bo->pin_count;
+	spin_unlock(&bo->bdev->lru_lock);
 }
 EXPORT_SYMBOL(ttm_bo_pin);
 
@@ -701,8 +704,11 @@ void ttm_bo_unpin(struct ttm_buffer_object *bo)
 	if (WARN_ON_ONCE(!bo->pin_count))
 		return;
 
-	if (!(--bo->pin_count) && bo->bulk_move && bo->resource)
-		ttm_lru_bulk_move_add(bo->bulk_move, bo->resource);
+	spin_lock(&bo->bdev->lru_lock);
+	--bo->pin_count;
+	if (bo->resource)
+		ttm_resource_add_bulk_move(bo->resource, bo);
+	spin_unlock(&bo->bdev->lru_lock);
 }
 EXPORT_SYMBOL(ttm_bo_unpin);
 
diff --git a/drivers/gpu/drm/ttm/ttm_resource.c b/drivers/gpu/drm/ttm/ttm_resource.c
index 65889b3caf50..20f9adcc3235 100644
--- a/drivers/gpu/drm/ttm/ttm_resource.c
+++ b/drivers/gpu/drm/ttm/ttm_resource.c
@@ -91,8 +91,8 @@ static void ttm_lru_bulk_move_pos_tail(struct ttm_lru_bulk_move_pos *pos,
 }
 
 /* Add the resource to a bulk_move cursor */
-void ttm_lru_bulk_move_add(struct ttm_lru_bulk_move *bulk,
-			   struct ttm_resource *res)
+static void ttm_lru_bulk_move_add(struct ttm_lru_bulk_move *bulk,
+				  struct ttm_resource *res)
 {
 	struct ttm_lru_bulk_move_pos *pos = ttm_lru_bulk_move_pos(bulk, res);
 
@@ -105,8 +105,8 @@ void ttm_lru_bulk_move_add(struct ttm_lru_bulk_move *bulk,
 }
 
 /* Remove the resource from a bulk_move range */
-void ttm_lru_bulk_move_del(struct ttm_lru_bulk_move *bulk,
-			   struct ttm_resource *res)
+static void ttm_lru_bulk_move_del(struct ttm_lru_bulk_move *bulk,
+				  struct ttm_resource *res)
 {
 	struct ttm_lru_bulk_move_pos *pos = ttm_lru_bulk_move_pos(bulk, res);
 
@@ -122,6 +122,22 @@ void ttm_lru_bulk_move_del(struct ttm_lru_bulk_move *bulk,
 	}
 }
 
+/* Add the resource to a bulk move if the BO is configured for it */
+void ttm_resource_add_bulk_move(struct ttm_resource *res,
+				struct ttm_buffer_object *bo)
+{
+	if (bo->bulk_move && !bo->pin_count)
+		ttm_lru_bulk_move_add(bo->bulk_move, res);
+}
+
+/* Remove the resource from a bulk move if the BO is configured for it */
+void ttm_resource_del_bulk_move(struct ttm_resource *res,
+				struct ttm_buffer_object *bo)
+{
+	if (bo->bulk_move && !bo->pin_count)
+		ttm_lru_bulk_move_del(bo->bulk_move, res);
+}
+
 /* Move a resource to the LRU or bulk tail */
 void ttm_resource_move_to_lru_tail(struct ttm_resource *res)
 {
@@ -169,15 +185,14 @@ void ttm_resource_init(struct ttm_buffer_object *bo,
 	res->bus.is_iomem = false;
 	res->bus.caching = ttm_cached;
 	res->bo = bo;
-	INIT_LIST_HEAD(&res->lru);
 
 	man = ttm_manager_type(bo->bdev, place->mem_type);
 	spin_lock(&bo->bdev->lru_lock);
-	man->usage += res->num_pages << PAGE_SHIFT;
-	if (bo->bulk_move)
-		ttm_lru_bulk_move_add(bo->bulk_move, res);
+	if (bo->pin_count)
+		list_add_tail(&res->lru, &bo->bdev->pinned);
 	else
-		ttm_resource_move_to_lru_tail(res);
+		list_add_tail(&res->lru, &man->lru[bo->priority]);
+	man->usage += res->num_pages << PAGE_SHIFT;
 	spin_unlock(&bo->bdev->lru_lock);
 }
 EXPORT_SYMBOL(ttm_resource_init);
@@ -210,8 +225,16 @@ int ttm_resource_alloc(struct ttm_buffer_object *bo,
 {
 	struct ttm_resource_manager *man =
 		ttm_manager_type(bo->bdev, place->mem_type);
+	int ret;
+
+	ret = man->func->alloc(man, bo, place, res_ptr);
+	if (ret)
+		return ret;
 
-	return man->func->alloc(man, bo, place, res_ptr);
+	spin_lock(&bo->bdev->lru_lock);
+	ttm_resource_add_bulk_move(*res_ptr, bo);
+	spin_unlock(&bo->bdev->lru_lock);
+	return 0;
 }
 
 void ttm_resource_free(struct ttm_buffer_object *bo, struct ttm_resource **res)
@@ -221,12 +244,9 @@ void ttm_resource_free(struct ttm_buffer_object *bo, struct ttm_resource **res)
 	if (!*res)
 		return;
 
-	if (bo->bulk_move) {
-		spin_lock(&bo->bdev->lru_lock);
-		ttm_lru_bulk_move_del(bo->bulk_move, *res);
-		spin_unlock(&bo->bdev->lru_lock);
-	}
-
+	spin_lock(&bo->bdev->lru_lock);
+	ttm_resource_del_bulk_move(*res, bo);
+	spin_unlock(&bo->bdev->lru_lock);
 	man = ttm_manager_type(bo->bdev, (*res)->mem_type);
 	man->func->free(man, *res);
 	*res = NULL;
diff --git a/include/drm/ttm/ttm_resource.h b/include/drm/ttm/ttm_resource.h
index 441653693970..ca89a48c2460 100644
--- a/include/drm/ttm/ttm_resource.h
+++ b/include/drm/ttm/ttm_resource.h
@@ -311,12 +311,12 @@ ttm_resource_manager_cleanup(struct ttm_resource_manager *man)
 }
 
 void ttm_lru_bulk_move_init(struct ttm_lru_bulk_move *bulk);
-void ttm_lru_bulk_move_add(struct ttm_lru_bulk_move *bulk,
-			   struct ttm_resource *res);
-void ttm_lru_bulk_move_del(struct ttm_lru_bulk_move *bulk,
-			   struct ttm_resource *res);
 void ttm_lru_bulk_move_tail(struct ttm_lru_bulk_move *bulk);
 
+void ttm_resource_add_bulk_move(struct ttm_resource *res,
+				struct ttm_buffer_object *bo);
+void ttm_resource_del_bulk_move(struct ttm_resource *res,
+				struct ttm_buffer_object *bo);
 void ttm_resource_move_to_lru_tail(struct ttm_resource *res);
 
 void ttm_resource_init(struct ttm_buffer_object *bo,
-- 
2.25.1

