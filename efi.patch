diff --git a/drivers/firmware/efi/vars.c b/drivers/firmware/efi/vars.c
index 436d1776bc7b..4714c79babb1 100644
--- a/drivers/firmware/efi/vars.c
+++ b/drivers/firmware/efi/vars.c
@@ -431,6 +431,8 @@ int efivar_init(int (*func)(efi_char16_t *, efi_guid_t, unsigned long, void *),
 	efi_char16_t *variable_name;
 	efi_status_t status;
 	efi_guid_t vendor_guid;
+	const int read_attempt_max = 16;
+	int read_attempt = 0;
 	int err = 0;
 
 	if (!__efivars)
@@ -449,17 +451,33 @@ int efivar_init(int (*func)(efi_char16_t *, efi_guid_t, unsigned long, void *),
 		goto free;
 	}
 
-	/*
-	 * Per EFI spec, the maximum storage allocated for both
-	 * the variable name and variable data is 1024 bytes.
-	 */
-
 	do {
-		variable_name_size = 1024;
+		/*
+		 * ASUS X470 boards with firmware 5007+ have a broken
+		 * get_next_variable implementation, where the same
+		 * variable is returned by multiple read calls. Work
+		 * around the issue by giving the function a few more
+		 * chances prior to erroring out.
+		 */
+
+		read_attempt = 0;
+
+		do {
+			/*
+			 * Per EFI spec, the maximum storage allocated for both
+			 * the variable name and variable data is 1024 bytes.
+			 */
+
+			variable_name_size = 1024;
+			read_attempt++;
+			status = ops->get_next_variable(&variable_name_size,
+							variable_name,
+							&vendor_guid);
+		} while (duplicates &&
+			 read_attempt < read_attempt_max &&
+			 status == EFI_SUCCESS &&
+			 variable_is_present(variable_name, &vendor_guid, head));
 
-		status = ops->get_next_variable(&variable_name_size,
-						variable_name,
-						&vendor_guid);
 		switch (status) {
 		case EFI_SUCCESS:
 			if (duplicates)
@@ -468,17 +486,18 @@ int efivar_init(int (*func)(efi_char16_t *, efi_guid_t, unsigned long, void *),
 			variable_name_size = var_name_strnsize(variable_name,
 							       variable_name_size);
 
+			if (read_attempt != 1) {
+				printk(KERN_WARNING "efivars: needed %d attempts "
+				       "to advance to next the EFI variable\n",
+				       read_attempt);
+			}
+
 			/*
-			 * Some firmware implementations return the
-			 * same variable name on multiple calls to
-			 * get_next_variable(). Terminate the loop
-			 * immediately as there is no guarantee that
-			 * we'll ever see a different variable name,
-			 * and may end up looping here forever.
+			 * Terminate the loop immediately as there is no
+			 * guarantee that we'll ever see a different variable
+			 * name, and may end up looping here forever.
 			 */
-			if (duplicates &&
-			    variable_is_present(variable_name, &vendor_guid,
-						head)) {
+			if (duplicates && read_attempt == read_attempt_max) {
 				dup_variable_bug(variable_name, &vendor_guid,
 						 variable_name_size);
 				status = EFI_NOT_FOUND;
